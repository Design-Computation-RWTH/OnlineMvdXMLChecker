//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.27 at 01:59:57 PM CEST 
//


package generated.buildingsmart_tech.mvd_xml_1dot2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IfcUnitEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="IfcUnitEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="absorbeddoseunit"/>
 *     &lt;enumeration value="amountofsubstanceunit"/>
 *     &lt;enumeration value="areaunit"/>
 *     &lt;enumeration value="doseequivalentunit"/>
 *     &lt;enumeration value="electriccapacitanceunit"/>
 *     &lt;enumeration value="electricchargeunit"/>
 *     &lt;enumeration value="electricconductanceunit"/>
 *     &lt;enumeration value="electriccurrentunit"/>
 *     &lt;enumeration value="electricresistanceunit"/>
 *     &lt;enumeration value="electricvoltageunit"/>
 *     &lt;enumeration value="energyunit"/>
 *     &lt;enumeration value="forceunit"/>
 *     &lt;enumeration value="frequencyunit"/>
 *     &lt;enumeration value="illuminanceunit"/>
 *     &lt;enumeration value="inductanceunit"/>
 *     &lt;enumeration value="lengthunit"/>
 *     &lt;enumeration value="luminousfluxunit"/>
 *     &lt;enumeration value="luminousintensityunit"/>
 *     &lt;enumeration value="magneticfluxdensityunit"/>
 *     &lt;enumeration value="magneticfluxunit"/>
 *     &lt;enumeration value="massunit"/>
 *     &lt;enumeration value="planeangleunit"/>
 *     &lt;enumeration value="powerunit"/>
 *     &lt;enumeration value="pressureunit"/>
 *     &lt;enumeration value="radioactivityunit"/>
 *     &lt;enumeration value="solidangleunit"/>
 *     &lt;enumeration value="thermodynamictemperatureunit"/>
 *     &lt;enumeration value="timeunit"/>
 *     &lt;enumeration value="volumeunit"/>
 *     &lt;enumeration value="userdefined"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "IfcUnitEnum")
@XmlEnum
public enum IfcUnitEnum {

    @XmlEnumValue("absorbeddoseunit")
    ABSORBEDDOSEUNIT("absorbeddoseunit"),
    @XmlEnumValue("amountofsubstanceunit")
    AMOUNTOFSUBSTANCEUNIT("amountofsubstanceunit"),
    @XmlEnumValue("areaunit")
    AREAUNIT("areaunit"),
    @XmlEnumValue("doseequivalentunit")
    DOSEEQUIVALENTUNIT("doseequivalentunit"),
    @XmlEnumValue("electriccapacitanceunit")
    ELECTRICCAPACITANCEUNIT("electriccapacitanceunit"),
    @XmlEnumValue("electricchargeunit")
    ELECTRICCHARGEUNIT("electricchargeunit"),
    @XmlEnumValue("electricconductanceunit")
    ELECTRICCONDUCTANCEUNIT("electricconductanceunit"),
    @XmlEnumValue("electriccurrentunit")
    ELECTRICCURRENTUNIT("electriccurrentunit"),
    @XmlEnumValue("electricresistanceunit")
    ELECTRICRESISTANCEUNIT("electricresistanceunit"),
    @XmlEnumValue("electricvoltageunit")
    ELECTRICVOLTAGEUNIT("electricvoltageunit"),
    @XmlEnumValue("energyunit")
    ENERGYUNIT("energyunit"),
    @XmlEnumValue("forceunit")
    FORCEUNIT("forceunit"),
    @XmlEnumValue("frequencyunit")
    FREQUENCYUNIT("frequencyunit"),
    @XmlEnumValue("illuminanceunit")
    ILLUMINANCEUNIT("illuminanceunit"),
    @XmlEnumValue("inductanceunit")
    INDUCTANCEUNIT("inductanceunit"),
    @XmlEnumValue("lengthunit")
    LENGTHUNIT("lengthunit"),
    @XmlEnumValue("luminousfluxunit")
    LUMINOUSFLUXUNIT("luminousfluxunit"),
    @XmlEnumValue("luminousintensityunit")
    LUMINOUSINTENSITYUNIT("luminousintensityunit"),
    @XmlEnumValue("magneticfluxdensityunit")
    MAGNETICFLUXDENSITYUNIT("magneticfluxdensityunit"),
    @XmlEnumValue("magneticfluxunit")
    MAGNETICFLUXUNIT("magneticfluxunit"),
    @XmlEnumValue("massunit")
    MASSUNIT("massunit"),
    @XmlEnumValue("planeangleunit")
    PLANEANGLEUNIT("planeangleunit"),
    @XmlEnumValue("powerunit")
    POWERUNIT("powerunit"),
    @XmlEnumValue("pressureunit")
    PRESSUREUNIT("pressureunit"),
    @XmlEnumValue("radioactivityunit")
    RADIOACTIVITYUNIT("radioactivityunit"),
    @XmlEnumValue("solidangleunit")
    SOLIDANGLEUNIT("solidangleunit"),
    @XmlEnumValue("thermodynamictemperatureunit")
    THERMODYNAMICTEMPERATUREUNIT("thermodynamictemperatureunit"),
    @XmlEnumValue("timeunit")
    TIMEUNIT("timeunit"),
    @XmlEnumValue("volumeunit")
    VOLUMEUNIT("volumeunit"),
    @XmlEnumValue("userdefined")
    USERDEFINED("userdefined");
    private final String value;

    IfcUnitEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static IfcUnitEnum fromValue(String v) {
        for (IfcUnitEnum c: IfcUnitEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
