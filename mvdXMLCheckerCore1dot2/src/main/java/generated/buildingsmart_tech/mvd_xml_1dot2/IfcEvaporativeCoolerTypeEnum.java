//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.27 at 01:59:57 PM CEST 
//


package generated.buildingsmart_tech.mvd_xml_1dot2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IfcEvaporativeCoolerTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="IfcEvaporativeCoolerTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="directevaporativerandommediaaircooler"/>
 *     &lt;enumeration value="directevaporativerigidmediaaircooler"/>
 *     &lt;enumeration value="directevaporativeslingerspackagedaircooler"/>
 *     &lt;enumeration value="directevaporativepackagedrotaryaircooler"/>
 *     &lt;enumeration value="directevaporativeairwasher"/>
 *     &lt;enumeration value="indirectevaporativepackageaircooler"/>
 *     &lt;enumeration value="indirectevaporativewetcoil"/>
 *     &lt;enumeration value="indirectevaporativecoolingtowerorcoilcooler"/>
 *     &lt;enumeration value="indirectdirectcombination"/>
 *     &lt;enumeration value="userdefined"/>
 *     &lt;enumeration value="notdefined"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "IfcEvaporativeCoolerTypeEnum")
@XmlEnum
public enum IfcEvaporativeCoolerTypeEnum {

    @XmlEnumValue("directevaporativerandommediaaircooler")
    DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER("directevaporativerandommediaaircooler"),
    @XmlEnumValue("directevaporativerigidmediaaircooler")
    DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER("directevaporativerigidmediaaircooler"),
    @XmlEnumValue("directevaporativeslingerspackagedaircooler")
    DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER("directevaporativeslingerspackagedaircooler"),
    @XmlEnumValue("directevaporativepackagedrotaryaircooler")
    DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER("directevaporativepackagedrotaryaircooler"),
    @XmlEnumValue("directevaporativeairwasher")
    DIRECTEVAPORATIVEAIRWASHER("directevaporativeairwasher"),
    @XmlEnumValue("indirectevaporativepackageaircooler")
    INDIRECTEVAPORATIVEPACKAGEAIRCOOLER("indirectevaporativepackageaircooler"),
    @XmlEnumValue("indirectevaporativewetcoil")
    INDIRECTEVAPORATIVEWETCOIL("indirectevaporativewetcoil"),
    @XmlEnumValue("indirectevaporativecoolingtowerorcoilcooler")
    INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER("indirectevaporativecoolingtowerorcoilcooler"),
    @XmlEnumValue("indirectdirectcombination")
    INDIRECTDIRECTCOMBINATION("indirectdirectcombination"),
    @XmlEnumValue("userdefined")
    USERDEFINED("userdefined"),
    @XmlEnumValue("notdefined")
    NOTDEFINED("notdefined");
    private final String value;

    IfcEvaporativeCoolerTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static IfcEvaporativeCoolerTypeEnum fromValue(String v) {
        for (IfcEvaporativeCoolerTypeEnum c: IfcEvaporativeCoolerTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
