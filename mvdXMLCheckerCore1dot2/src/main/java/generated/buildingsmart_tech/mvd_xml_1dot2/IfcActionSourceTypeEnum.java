//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.27 at 01:59:57 PM CEST 
//


package generated.buildingsmart_tech.mvd_xml_1dot2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IfcActionSourceTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="IfcActionSourceTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="dead_load_g"/>
 *     &lt;enumeration value="completion_g1"/>
 *     &lt;enumeration value="live_load_q"/>
 *     &lt;enumeration value="snow_s"/>
 *     &lt;enumeration value="wind_w"/>
 *     &lt;enumeration value="prestressing_p"/>
 *     &lt;enumeration value="settlement_u"/>
 *     &lt;enumeration value="temperature_t"/>
 *     &lt;enumeration value="earthquake_e"/>
 *     &lt;enumeration value="fire"/>
 *     &lt;enumeration value="impulse"/>
 *     &lt;enumeration value="impact"/>
 *     &lt;enumeration value="transport"/>
 *     &lt;enumeration value="erection"/>
 *     &lt;enumeration value="propping"/>
 *     &lt;enumeration value="system_imperfection"/>
 *     &lt;enumeration value="shrinkage"/>
 *     &lt;enumeration value="creep"/>
 *     &lt;enumeration value="lack_of_fit"/>
 *     &lt;enumeration value="buoyancy"/>
 *     &lt;enumeration value="ice"/>
 *     &lt;enumeration value="current"/>
 *     &lt;enumeration value="wave"/>
 *     &lt;enumeration value="rain"/>
 *     &lt;enumeration value="brakes"/>
 *     &lt;enumeration value="userdefined"/>
 *     &lt;enumeration value="notdefined"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "IfcActionSourceTypeEnum")
@XmlEnum
public enum IfcActionSourceTypeEnum {

    @XmlEnumValue("dead_load_g")
    DEAD_LOAD_G("dead_load_g"),
    @XmlEnumValue("completion_g1")
    COMPLETION_G_1("completion_g1"),
    @XmlEnumValue("live_load_q")
    LIVE_LOAD_Q("live_load_q"),
    @XmlEnumValue("snow_s")
    SNOW_S("snow_s"),
    @XmlEnumValue("wind_w")
    WIND_W("wind_w"),
    @XmlEnumValue("prestressing_p")
    PRESTRESSING_P("prestressing_p"),
    @XmlEnumValue("settlement_u")
    SETTLEMENT_U("settlement_u"),
    @XmlEnumValue("temperature_t")
    TEMPERATURE_T("temperature_t"),
    @XmlEnumValue("earthquake_e")
    EARTHQUAKE_E("earthquake_e"),
    @XmlEnumValue("fire")
    FIRE("fire"),
    @XmlEnumValue("impulse")
    IMPULSE("impulse"),
    @XmlEnumValue("impact")
    IMPACT("impact"),
    @XmlEnumValue("transport")
    TRANSPORT("transport"),
    @XmlEnumValue("erection")
    ERECTION("erection"),
    @XmlEnumValue("propping")
    PROPPING("propping"),
    @XmlEnumValue("system_imperfection")
    SYSTEM_IMPERFECTION("system_imperfection"),
    @XmlEnumValue("shrinkage")
    SHRINKAGE("shrinkage"),
    @XmlEnumValue("creep")
    CREEP("creep"),
    @XmlEnumValue("lack_of_fit")
    LACK_OF_FIT("lack_of_fit"),
    @XmlEnumValue("buoyancy")
    BUOYANCY("buoyancy"),
    @XmlEnumValue("ice")
    ICE("ice"),
    @XmlEnumValue("current")
    CURRENT("current"),
    @XmlEnumValue("wave")
    WAVE("wave"),
    @XmlEnumValue("rain")
    RAIN("rain"),
    @XmlEnumValue("brakes")
    BRAKES("brakes"),
    @XmlEnumValue("userdefined")
    USERDEFINED("userdefined"),
    @XmlEnumValue("notdefined")
    NOTDEFINED("notdefined");
    private final String value;

    IfcActionSourceTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static IfcActionSourceTypeEnum fromValue(String v) {
        for (IfcActionSourceTypeEnum c: IfcActionSourceTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
